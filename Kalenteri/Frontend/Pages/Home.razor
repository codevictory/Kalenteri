@using Kalenteri.Backend.Models
@using System.Globalization
@using Kalenteri.Backend.Services

@page "/"
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Kalenteri</PageTitle>

<h1>KALENTERI</h1>

@if (_order != null)
{
    <p>Käyttäjä: <b>@_userId</b></p>
    <p>Jakopaikka: <b>@_location</b></p>

    <h2 class="month-title">
        @MonthToString()kuu
    </h2>

    <div class="calendar">
        <span>Ma</span>
        <span>Ti</span>
        <span>Ke</span>
        <span>To</span>
        <span>Pe</span>
        <span>La</span>
        <span>Su</span>
        @for (int pad = 0; pad < GetFirstWeekPadding(); pad++)
        {
            <span class="week-day-padding" />
        }
        @for (int day = 1; day <= DateTime.DaysInMonth(_year, _month); day++)
        {
            var delivery = _order!.Boxes.SingleOrDefault(x => x.Delivery.Day == day && x.Delivery.Month == _month);

            if (delivery != null)
            {
                <button class="btn" @onclick="@(_ => HandlePickUpClick(delivery.Delivery))"
                        style="@StyleForState(delivery.PickUp == null)">@day</button>
            }
            else
            {
                <button class="btn empty-btn" disabled>@day</button>
            }
        }
    </div>

    <div class="month-navigation">
        <button class="btn month-nav-btn" @onclick="DecreaseMonth">Edellinen</button>
        <button class="btn month-nav-btn" @onclick="IncreaseMonth">Seuraava</button>
    </div>
}
<Login  @ref="_loginRef" LoginCallback="LoginComplete" />

@code {
    private int _month = DateTime.Now.Month;
    private readonly int _year = DateTime.Now.Year;
    private string _userId = "";
    private string _location = "";
    private Order? _order = null;
    private Login? _loginRef;
    
    
    private void DecreaseMonth()
    {
        if (_month != 1)
        {
            _month--;
        }
    }

    private void IncreaseMonth()
    {
        if (_month != 12)
        {
            _month++;
        }
    }

    private string MonthToString()
    {
        return CultureInfo.CreateSpecificCulture("fi")
        .TextInfo.ToTitleCase(CultureInfo.CreateSpecificCulture("fi")
        .DateTimeFormat.GetAbbreviatedMonthName(_month));
    }

    private int GetFirstWeekPadding()
    {
        var weekDayNumber = (int)new DateTime(_year, _month, 1).DayOfWeek;
        return weekDayNumber == 0 ? 6 : weekDayNumber - 1;
    }

    private string StyleForState(bool state)
    {
        if (state) return "background:lime";
        return "background:cornflowerblue";
    }

    private void HandlePickUpClick(DateTime delivery)
    {
        
        var box = _order!.Boxes.Single(y => y.Delivery == delivery);

        if (box.PickUp == null)
        {
            box.PickUp = DateTime.Now;

        }
        else
        {
            box.PickUp = null;
        }
        
        _order = OrderPossuService.UpdateData(_order.Identifier, box);
        StateHasChanged();
    }


    protected override void OnAfterRender ( bool firstRender ) 
    {
        if (_order == null)
        {
            _loginRef!.Show();
        }
    }

    private void LoginComplete(Order order)
    {
        _order = order;
        _userId = order.Identifier;
        _location = order.Location;
    }
    
}