@using Kalenteri.Backend.Models

@page "/"
@rendermode InteractiveServer

<PageTitle>Kalenteri</PageTitle>

<p>Käyttäjä: <b>@userId</b></p>
<p>Jakopaikka: <b>@location</b></p>

<h2 class="month-title">@MonthToString()</h2>

<div class="calendar">
    <span>Ma</span>
    <span>Ti</span>
    <span>Ke</span>
    <span>To</span>
    <span>Pe</span>
    <span>La</span>
    <span>Su</span>
    @for (int pad = 0; pad < GetFirstWeekPadding(); pad++)
    {
        <span class="week-day-padding" />
    }
    @for (int day = 1; day < GetMonthDayCount(); day++)
    {
        var order = orders.Single(x => x.Identifier == "Testi");
        var delivery = order.Boxes.SingleOrDefault(x => x.Delivery.Day == day && x.Delivery.Month == month);

        if (delivery != null)
        {
            <button class="btn" @onclick="@(_ => HandlePickUpClick(delivery.Delivery))"
                style="@StyleForState(delivery.PickUp == null)">@day</button>
        }
        else
        {
            <button class="btn empty-btn" disabled>@day</button>
        }
    }
</div>

<div class="month-navigation">
    <button class="btn month-nav-btn" @onclick="DecreaseMonth">Edellinen</button>
    <button class="btn month-nav-btn" @onclick="IncreaseMonth">Seuraava</button>
</div>

@code {
    private int month = DateTime.Now.Month;
    private string userId = "Testi";
    private string location = "Testikatu 16, 12345 Testilandia";

    private void DecreaseMonth()
    {
        if (month != 1)
        {
            month--;
        }
    }

    private void IncreaseMonth()
    {
        if (month != 12)
        {
            month++;
        }
    }

    private string MonthToString()
    {
        switch (month)
        {
            case 1:
                return "Tammikuu";
            case 2:
                return "Helmikuu";
            case 3:
                return "Maaliskuu";
            case 4:
                return "Huhtikuu";
            case 5:
                return "Toukokuu";
            case 6:
                return "Kesäkuu";
            case 7:
                return "Heinäkuu";
            case 8:
                return "Elokuu";
            case 9:
                return "Syyskuu";
            case 10:
                return "Lokakuu";
            case 11:
                return "Marraskuu";
            case 12:
                return "Joulukuu";
            default:
                return "Tuntematon";
        }
    }

    private int GetMonthDayCount()
    {
        switch (month)
        {
            case 1:
                return 31;
            case 2:
                return 29;
            case 3:
                return 31;
            case 4:
                return 30;
            case 5:
                return 31;
            case 6:
                return 30;
            case 7:
                return 31;
            case 8:
                return 31;
            case 9:
                return 30;
            case 10:
                return 31;
            case 11:
                return 30;
            case 12:
                return 31;
            default:
                return 30;
        }
    }

    private int GetFirstWeekPadding()
    {
        switch (month)
        {
            case 1:
                return 0;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 0;
            case 5:
                return 2;
            case 6:
                return 5;
            case 7:
                return 0;
            case 8:
                return 3;
            case 9:
                return 6;
            case 10:
                return 1;
            case 11:
                return 4;
            case 12:
                return 6;
            default:
                return 0;
        }
    }

    private string StyleForState(bool state)
    {
        if (state) return "background:lime";
        return "background:cornflowerblue";
    }

    private void HandlePickUpClick(DateTime delivery)
    {
        var box = orders.Single(x => x.Identifier == userId).Boxes.Single(y => y.Delivery == delivery);

        if (box.PickUp == null)
        {
            box.PickUp = DateTime.Now;

        }
        else
        {
            box.PickUp = null;
        }
    }


    private List<Order> orders = new List<Order>() {
new Order() {Identifier = "Testi", Location = "Testikatu 16, 12345 Testilandia", Boxes = new List<Box>() {
new Box() { Delivery = DateTime.Now, PickUp = DateTime.Now },
new Box() { Delivery = DateTime.Now.AddDays(1), PickUp = DateTime.Now },
new Box() { Delivery = DateTime.Now.AddDays(4), PickUp = null },
new Box() { Delivery = DateTime.Now.AddDays(12), PickUp = null },
new Box() { Delivery = DateTime.Now.AddDays(18), PickUp = null }
}}
};
}