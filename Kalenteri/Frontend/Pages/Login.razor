@using System.ComponentModel.DataAnnotations
@using Kalenteri.Backend.Models
@using Kalenteri.Backend.Services
@inject NavigationManager NavManager
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Kirjautuminen</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <EditForm EditContext="editContext" OnSubmit="Submit" FormName="Login">
            <DataAnnotationsValidator />
            <div class="toast-body">
                <label>
                    Tunnus: 
                    <InputText @bind-Value="Model!.Id" />
                </label>
            </div>
            <ValidationSummary />
            <div class="toast-body">
                <button type="submit" class="btn-primary">Kirjaudu</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private EditContext? editContext;
    
    private ValidationMessageStore? messageStore;

    [SupplyParameterFromForm]
    private LoginData? Model { get; set; }
    
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<Order> LoginCallback { get; set; }
    
    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        IsVisible = false;
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        Model ??=
            new()
            {
                Id = "",
            };
        editContext = new(Model);
        messageStore = new ValidationMessageStore(editContext);
    }
    
    private async Task Submit()
    {
        messageStore.Clear();
        if (editContext != null && editContext.Validate())
        {
            Order order = OrderServices.GetData(Model.Id);

            if (order != null)
            {
                await LoginCallback.InvokeAsync(order);
                Close();
            }
            else
            {
                messageStore.Add(() => Model.Id, "Kirjautuminen ep√§onnistui!");
                editContext.NotifyValidationStateChanged();
            }
        }
    }
}